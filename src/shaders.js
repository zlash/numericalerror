let roomVS = `in vec4 aVertexPosition;uniform mat4 uProjectionMatrix,uClipModelViewMatrix;out vec4 vViewVector;void main(){vec4 v=inverse(uProjectionMatrix)*vec4(aVertexPosition.xy,1.,1.);v/=v.w;vec4 n=inverse(uProjectionMatrix)*vec4(aVertexPosition.xy,-1.,1.);n/=n.w;vViewVector=v-n;gl_Position=uClipModelViewMatrix*vec4(aVertexPosition.xy,0.,1.);}`;
let screenQuadVS = `in vec4 aVertexPosition;void main(){gl_Position=vec4(aVertexPosition.xy,0.,1.);}`;
let roomFunctionsFS = `float sdfPlane(vec3 s,vec3 v){return dot(s,v);}float sdfBox(vec3 s,vec3 v){vec3 m=abs(s)-v;return length(max(m,0.))+min(max(m.x,max(m.y,m.z)),0.);}float sdfRoundedBox(vec3 s,vec3 v,float m){vec3 f=abs(s)-v;return length(max(f,0.))-m+min(max(f.x,max(f.y,f.z)),0.);}float sdfOpIntersection(float s,float v){return max(s,v);}float sdfOpExtrusion(vec3 s,float m,float v){vec2 f=vec2(m,abs(s.z)-v);return min(max(f.x,f.y),0.)+length(max(f,0.));}vec3 sdfOpRepeat(vec3 s,vec3 v){return mod(s,v)-.5*v;}float sdfOpSmoothUnion(float v,float s,float m){float f=clamp(.5+.5*(s-v)/m,0.,1.);return mix(s,v,f)-m*f*(1.-f);}const vec3 brickSize=vec3(.3,.13,.03);float sdfBrick4x4(vec3 s){const float v=.95;vec3 m=sdfOpRepeat(s,vec3(brickSize.xy*4.,0.));return sdfRoundedBox(m,brickSize*vec3(.8*v,.5*v,1.),.05);}float sdfBrickRow(vec3 s){return min(sdfBrick4x4(s),sdfBrick4x4(s-vec3(brickSize.x*2.,0.,0.)));}float sdfWall(vec3 s,vec2 v){float m=sdfPlane(s,vec3(0.,0.,1.)),f=min(sdfBrickRow(s),sdfBrickRow(s-vec3(brickSize.x,brickSize.y*2.,0.)));return sdfOpIntersection(min(m,f),sdfBox(s,vec3(v,brickSize.z*2.5)));}float sdfPlayerShip(vec3 s){return sdfOpSmoothUnion(sdfBox(s,vec3(.1,.1,.3)),sdfBox(s-vec3(0.,0.,.15),vec3(.4,.05,.1)),.1);}float dynamicStuff(vec3 s){return sdfPlayerShip(vec3(uDynamicTransforms[0]*vec4(s,1.)));}`;
let roomHeaderFS = `in vec4 vViewVector;uniform mat4 uModelViewMatrix;uniform ivec2 uScreenSize;uniform mat4 uDynamicTransforms[10];uniform float uTimeSeconds;layout(location=0)out vec4 fragColor;`;
let roomRenderFS = `float shadow(vec3 v,vec3 s,float m,float x){float f=1.,r=m;for(int i=0;i<32;i++){float n=room(v+s*r).x;f=min(f,10.*n/r);r+=n;if(abs(n)<.001||r>x)break;}return step(.01,f);}vec2 hash(vec2 v){const vec2 n=vec2(.31831,.367879);v=v*n+n.yx;return-1.+2.*fract(16.*n*fract(v.x*v.y*(v.x+v.y)));}float noise(in vec2 v){vec2 i=floor(v),n=fract(v),f=n*n*(3.-2.*n);return mix(mix(dot(hash(i+vec2(0.,0.)),n-vec2(0.,0.)),dot(hash(i+vec2(1.,0.)),n-vec2(1.,0.)),f.x),mix(dot(hash(i+vec2(0.,1.)),n-vec2(0.,1.)),dot(hash(i+vec2(1.,1.)),n-vec2(1.,1.)),f.x),f.y);}float tex(vec2 v){v*=10.;mat2 n=mat2(1.6,1.2,-1.2,1.6);float f=.5*noise(v);v=n*v;f+=.25*noise(v);v=n*v;f+=.125*noise(v);v=n*v;f+=.0625*noise(v);v=n*v;return f*.5+.5;}vec3 lava(vec2 v){v*=.2;float n=noise(v*5.),f=noise(10.+v*20.)*.5+.5,i=n*3.1415;vec2 m=2.*vec2(cos(i),sin(i));float x=uTimeSeconds*.5+f,d=fract(x),r=fract(x+.5);vec2 s=m*.1*d,y=m*.1*r;vec3 l=vec3(n);float u=mix(tex(v+s),tex(v+y),abs(d*2.-1.));u=min(1.,max(0.,abs(u-.35)/.35));return mix(vec3(1.,0.,0.),vec3(1.,1.,0.),u);}vec3 shade(vec3 v,vec3 m,float i){if(i<.5)return vec3(.6);else if(i<1.5)return lava(v.xz);return vec3(1.,0.,0.);}uniform mat4 uProjectionMatrix;void main(){const float v=3.;vec3 f=vec3(0.),i;vec2 n;float r=.1;mat4 m=inverse(uModelViewMatrix);vec2 u=gl_FragCoord.xy/vec2(uScreenSize);vec4 s=inverse(uProjectionMatrix)*vec4(u.xy*2.-vec2(1),-1.,1.),d=inverse(uProjectionMatrix)*vec4(u.xy*2.-vec2(1),1.,1.);vec3 x=s.xyz/s.w,y=normalize(d.xyz/d.w-x);for(int l=0;l<64;l++){i=x+y*r;i=vec3(m*vec4(i,1.));n=room(i);float h=n.x;if(abs(h)<.001||r>20.)break;r+=h;}if(r<20.){vec3 h=normalize(vec3(1.,1.,1.)),a=calcNormal(i);f=shade(i,a,n.y);float l=1.;l*=max(0.,dot(h,a));f*=min(1.,.4+l);}else{discard;}fragColor=vec4(f.xyz,1.);}`;
let collisionsFS = `layout(location=0)out vec4 fragColor;void main(){fragColor=vec4(.2,.3,.4,.5);}`;
