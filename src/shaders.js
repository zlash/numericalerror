let roomVS = `in vec4 aVertexPosition;uniform mat4 uProjectionMatrix;out vec2 vUvs;out vec4 vViewVector;void main(){vUvs=(aVertexPosition.xy+vec2(1.))*.5;vec4 v=inverse(uProjectionMatrix)*vec4(aVertexPosition.xy,1.,1.);v/=v.w;vec4 n=inverse(uProjectionMatrix)*vec4(aVertexPosition.xy,-1.,1.);n/=n.w;vViewVector=v-n;gl_Position=vec4(aVertexPosition.xy,0.,1.);}`;
let roomFunctionsFS = `float sdfPlane(vec3 s,vec3 v){return dot(s,v);}float sdfBox(vec3 s,vec3 v){vec3 m=abs(s)-v;return length(max(m,0.))+min(max(m.x,max(m.y,m.z)),0.);}float sdfRoundedBox(vec3 s,vec3 v,float m){vec3 f=abs(s)-v;return length(max(f,0.))-m+min(max(f.x,max(f.y,f.z)),0.);}float sdfOpIntersection(float s,float v){return max(s,v);}vec3 sdfOpRepeat(vec3 s,vec3 v){return mod(s,v)-.5*v;}float sdfOpSmoothUnion(float v,float s,float m){float f=clamp(.5+.5*(s-v)/m,0.,1.);return mix(s,v,f)-m*f*(1.-f);}const vec3 brickSize=vec3(.3,.13,.03);float sdfBrick4x4(vec3 s){const float v=.95;vec3 m=sdfOpRepeat(s,vec3(brickSize.xy*4.,0.));return sdfRoundedBox(m,brickSize*vec3(.8*v,.5*v,1.),.05);}float sdfBrickRow(vec3 s){return min(sdfBrick4x4(s),sdfBrick4x4(s-vec3(brickSize.x*2.,0.,0.)));}float sdfWall(vec3 s,vec2 v){float m=sdfPlane(s,vec3(0.,0.,1.)),f=min(sdfBrickRow(s),sdfBrickRow(s-vec3(brickSize.x,brickSize.y*2.,0.)));return sdfOpIntersection(min(m,f),sdfBox(s,vec3(v,brickSize.z*2.5)));}`;
let roomHeaderFS = `in vec2 vUvs;in vec4 vViewVector;uniform mat4 uModelViewMatrix;uniform int uZero;layout(location=0)out vec4 fragColor;`;
let roomRenderFS = `float shadow(vec3 v,vec3 s,float m,float x){float f=1.,i=m;for(int e=0;e<32;e++){float u=room(v+s*i).x;f=min(f,10.*u/i);i+=u;if(abs(u)<.001||i>x)break;}return step(.01,f);}uniform mat4 uProjectionMatrix;void main(){const float f=3.;vec3 v=vec3(0.),i;vec2 m;float u=.1;mat4 s=inverse(uModelViewMatrix);vec4 r=inverse(uProjectionMatrix)*vec4(vUvs.xy*2.-vec2(1),-1.,1.),a=inverse(uProjectionMatrix)*vec4(vUvs.xy*2.-vec2(1),1.,1.);vec3 e=r.xyz/r.w,y=normalize(a.xyz/a.w-r.xyz/r.w);for(int x=0;x<64;x++){i=e+y*u;i=vec3(s*vec4(i,1.));m=room(i);float n=m.x;if(abs(n)<.001||u>20.)break;u+=n;}if(u<20.){vec3 n=normalize(vec3(1.,1.,1.));if(m.y>0.)v=vec3(1.,0.,0.);else v=vec3(.6);vec3 x=calcNormal(i);float w=1.;w*=max(0.,dot(n,x));v*=min(1.,.4+w);}else{discard;}fragColor=vec4(v.xyz,1.);}`;
